'use strict';

// Data needed for a later exercise
const flights =
  '_Delayed_Departure;fao93766109;txl2133758440;11:25+_Arrival;bru0943384722;fao93766109;11:45+_Delayed_Arrival;hel7439299980;fao93766109;12:05+_Departure;fao93766109;lis2323639855;12:30';

// Data needed for first part of the section
const restaurant = {
  name: 'Classico Italiano',
  location: 'Via Angelo Tavanti 23, Firenze, Italy',
  categories: ['Italian', 'Pizzeria', 'Vegetarian', 'Organic'],
  starterMenu: ['Focaccia', 'Bruschetta', 'Garlic Bread', 'Caprese Salad'],
  mainMenu: ['Pizza', 'Pasta', 'Risotto'],
  // numGuests: 13,

  openingHours: {
    thu: {
      open: 12,
      close: 22,
    },
    fri: {
      open: 11,
      close: 23,
    },
    sat: {
      open: 0, // Open 24 hours
      close: 24,
    },
  },

  order: function (starterIndex, mainIndex) {
    return [this.starterMenu[starterIndex], this.mainMenu[mainIndex]];
  },

  orderDelivery: function ({
    starterIndex = 1,
    mainIndex = 0,
    time = '10:00',
    location = 'Unknown location.',
  }) {
    console.log(
      `Your order of ${this.starterMenu[starterIndex]} and ${this.mainMenu[mainIndex]} was received at ${time} from ${location} location. Please be patient while we prepare your delivery.`
    );
  },

  orderPasta: function (ing1, ing2, ing3 = restaurant.starterMenu[3]) {
    console.log(
      `Here is your delicious pasta with ${ing1}, ${ing2}, and ${ing3}`
    );
  },

  orderPizza: function (...otherIngredients) {
    const otherIngs = otherIngredients;
    console.log(otherIngs);
    return otherIngs;
  },
};

restaurant.homeMade = 'lickety split';
console.log(restaurant);

restaurant.orderPizza('cheese', 'ravioli', 'onions', 'spinach');
// const otherIngs = [...otherIngredients];
// console.log(otherIngs);

// • [NOTE] Calling the orderDelivery method of the restaurant object and passing an object in as its argument

restaurant.orderDelivery({
  time: '23:30',
  location: 'Queen St',
  mainIndex: 3,
  starterIndex: 1,
});

// Feb. 5, 2024
restaurant.orderPasta(restaurant.starterMenu[1], restaurant.starterMenu[0]);

// const ingredients = [
//   prompt('Give me 3 ingredients'),
//   prompt('Give me 3 ingredients'),
//   prompt('Give me 3 ingredients'),
// ];

// restaurant.orderPasta(...ingredients);

// Spreading objects to make a new copy and add to it or copy and change values

const newRestaurant = { ...restaurant, founder: 'djWooster', babe: 'babes' };
console.log(newRestaurant);

const newRestaurantCopy = { ...restaurant };
newRestaurantCopy.name = 'Harry Weinfields';
console.log(newRestaurantCopy);
console.log(restaurant);

// Rest Pattern and parameters
// Collect items and pack them into an array
// Rest operator is on left side of assignment operator

// Destructuring and collecting into an array called others
const [a, b, ...others] = [2, 3, 4, 5];
console.log(others);

// leaving saturday alone but getting the weekdays
const { sat, ...weekDays } = restaurant.openingHours;
console.log(weekDays);

console.log(restaurant);

// *************************************************************
// Feb. 6, 2024

// 2. FUNCTIONS
// Rest parameters take in all parameters and packs them into an array (opposite of spread operator) (SPREAD expands / REST compresses)

// Rest arguments that consolidates any number of parameters passed into the function and packed into an array below

const add = function (...numbers) {
  let sum = 0;
  for (let i = 0; i < numbers.length; i++) sum += numbers[i];
  console.log(sum);
};

add(2, 3, 45, 6);
add(2, 3, 45, 6, 6, 3, 2, 5);
add(2, 3);

const xArr = [23, 5, 7];
add(...xArr);
console.log(...xArr);

const restPractice = [2, 9, 6, 543, 67];

const restPractice2 = [...restPractice];
console.log(restPractice2);

// SHORT CIRCUITING ||

//  The result of a logical operator doesn't have to be a boolean
// they can also use and return any data type

// if first value is truthy, then the other will not even be evaluated

// || returns first truthy value or last if all are falsy

console.log(3 || 'dJ');

console.log(undefined || 0 || '' || 'Hello' || null);

//  expects 'hello' -- first truthy value and short circuits the rest

//  using this ternary operator to check if restaurant.numGuests exists, and if it does, then guests1 equals that, otherwise set the default to 10
const guests1 = restaurant.numGuests ? restaurant.numGuests : 10;

console.log(guests1);

// great way to set default values instead of ternary operators or if/else statements by using short circuiting

const restTest = restaurant.numGuests || 10;
console.log(restTest);

// SHORT CIRCUITING &&

// can be used to execute code if first operand is true

console.log(true && 'DJ' && 7 && 'test');
// all truthy simply returns the final truthy value

console.log(true && 'DJ' && 0 && 'test');
// a falsy value stops the operation immediately and returns the falsy value

if (restaurant.orderPizza) {
  console.log(restaurant.orderPizza('spinach', 'mushies'));
}

restaurant.orderPizza && restaurant.orderPizza('bacon', 'cheese');

const testIngs = restaurant.orderPizza('mushies', 'cake batter');

console.log(testIngs[0]);

/*

// *************************************************************
// Feb. 2, 2024
// DESTRUCTURING OBJECTS

// • [NOTE] Use the exact name of the property of the object when creating new variables

// • [NOTE] Really helpful to rename object properties when we get data from third-party APIs

const {
  name: restName,
  categories: restCategories,
  openingHours: restOpeningHours,
} = restaurant;

console.log(restName, restCategories, restOpeningHours);

// • [NOTE] Object default values

// • [NOTE] Useful to set these default values (an empty array with (= []) when we don't know what kind of data we're going to be getting from API calls and third-party data

const { menu = [], starterMenu: starters = [] } = restaurant;
console.log(menu, starters);

// • [NOTE] Mutating variables
let mutateA = 111;
let mutateB = 222;
const mutatePractice = { mutateA: 23, mutateB: 37, mutateC: 87 };

// • [NOTE] This won't work to reassign the value of mutateA and mutateB to the value inside the object
// { mutateA, mutateB } = mutatePractice;

// • [NOTE] Need to wrap the destructuring in parenthesis

({ mutateA, mutateB } = mutatePractice);
console.log(mutateA, mutateB);
// [EXPECTS] 23 37

// • [NOTE] Nested object destructuring
const {
  fri: { open: friOpen, close: friClose },
} = restOpeningHours;
console.log(friOpen, friClose);
// [EXPECTS] 11 23

// *************************************************************

// DESTRUCTURING ARRAYS

// Destructuring arrays [basically just unpacking an array into separate variables]

// Old way we would retrieve values from variables
const arr = [1, 2, 3];
// const a = arr[0];
// const b = arr[1];
// const c = arr[2];

// • [NOTE] Brackets on the left side of the assignment operator is the syntax used to destructure an array from the right side of the assignment operator (original array unaffected)

const [x, y, z] = arr;
console.log(x, y, z);

// • [NOTE] Leave a hole to skip indices of array
const [cat1, cat2, , cat4] = restaurant.categories;
console.log(cat1, cat2, cat4);

console.log(restaurant.order(2, 0));
// [EXPECTS] ["Garlic Bread", "Pizza"]

// • [NOTE] Because restaurant.order returns an array, we can destructure the array into separate variables

const [appetizer, mainCourse] = restaurant.order(2, 0);
console.log(appetizer, mainCourse);

//  • [NOTE] Nested Destructuring
const nested = [2, 3, 4, [5, 6]];

const [nestedIn2, , , [nestedIn5]] = nested;
console.log(nestedIn2, nestedIn5);
// [EXPECTS] 2 5

//  • [NOTE] Default values in while destructuring arrays
const arrayDefault = [6, 7];
const [value1 = 1, value2 = 1, value3 = 1] = arrayDefault;
console.log(value1, value2, value3);

// SPREAD OPERATOR
const arrSpread = [7, 8, 9];
const badNewArray = [1, 2, 3, arrSpread[0], arrSpread[1]];

// With spread operator
const goodNewArray = [1, 2, 3, ...arrSpread];
console.log(goodNewArray);

// takes out of original array and writes it out manually and are valuable anytime we can use values separated by commas

const newMainMenu = [
  ...restaurant.mainMenu,
  'Gnocci',
  ...restaurant.starterMenu,
];

console.log(newMainMenu);

// Copy array
const mainMenuCopy = [...restaurant.mainMenu];

// Join 2 arrays
const fullMenu = [...restaurant.starterMenu, ...restaurant.mainMenu];

// Spread operator works on all iterables (arrays, strings, maps, sets (not objects))

// Since strings are iterables, we can use spread operator on them as well
const myName = 'Daniel';
console.log(...myName);

// Values seperated by commas are usually expected when building new arrays and passing arguments into a function

*/
