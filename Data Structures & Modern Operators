'use strict';

// Data needed for a later exercise
const flights =
  '_Delayed_Departure;fao93766109;txl2133758440;11:25+_Arrival;bru0943384722;fao93766109;11:45+_Delayed_Arrival;hel7439299980;fao93766109;12:05+_Departure;fao93766109;lis2323639855;12:30';

// Data needed for first part of the section
const restaurant = {
  name: 'Classico Italiano',
  location: 'Via Angelo Tavanti 23, Firenze, Italy',
  categories: ['Italian', 'Pizzeria', 'Vegetarian', 'Organic'],
  starterMenu: ['Focaccia', 'Bruschetta', 'Garlic Bread', 'Caprese Salad'],
  mainMenu: ['Pizza', 'Pasta', 'Risotto'],

  openingHours: {
    thu: {
      open: 12,
      close: 22,
    },
    fri: {
      open: 11,
      close: 23,
    },
    sat: {
      open: 0, // Open 24 hours
      close: 24,
    },
  },

  order: function (starterIndex, mainIndex) {
    return [this.starterMenu[starterIndex], this.mainMenu[mainIndex]];
  },

  orderDelivery: function ({
    starterIndex = 1,
    mainIndex = 0,
    time = '10:00',
    location = 'Unknown location.',
  }) {
    console.log(
      `Your order of ${this.starterMenu[starterIndex]} and ${this.mainMenu[mainIndex]} was received at ${time} from ${location} location. Please be patient while we prepare your delivery.`
    );
  },
};

// • [NOTE] Callig the orderDelivery method of the restaurant object and passing an object in as its argument

restaurant.orderDelivery({
  time: '23:30',
  location: 'Queen St',
  mainIndex: 3,
  starterIndex: 1,
});

// *************************************************************

// Feb. 2, 2024
// DESTRUCTURING OBJECTS

// • [NOTE] Use the exact name of the property of the object when creating new variables

// • [NOTE] Really helpful to rename object properties when we get data from third-party APIs

const {
  name: restName,
  categories: restCategories,
  openingHours: restOpeningHours,
} = restaurant;

console.log(restName, restCategories, restOpeningHours);

// • [NOTE] Object default values

// • [NOTE] Useful to set these default values (an empty array with (= []) when we don't know what kind of data we're going to be getting from API calls and third-party data

const { menu = [], starterMenu: starters = [] } = restaurant;
console.log(menu, starters);

// • [NOTE] Mutating variables
let mutateA = 111;
let mutateB = 222;
const mutatePractice = { mutateA: 23, mutateB: 37, mutateC: 87 };

// • [NOTE] This won't work to reassign the value of mutateA and mutateB to the value inside the object
// { mutateA, mutateB } = mutatePractice;

// • [NOTE] Need to wrap the destructuring in parenthesis

({ mutateA, mutateB } = mutatePractice);
console.log(mutateA, mutateB);
// [EXPECTS] 23 37

// • [NOTE] Nested object destructuring
const {
  fri: { open: friOpen, close: friClose },
} = restOpeningHours;
console.log(friOpen, friClose);
// [EXPECTS] 11 23

// *************************************************************

// DESTRUCTURING ARRAYS

// Destructuring arrays [basically just unpacking an array into separate variables]

// Old way we would retrieve values from variables
const arr = [1, 2, 3];
// const a = arr[0];
// const b = arr[1];
// const c = arr[2];

// • [NOTE] Brackets on the left side of the assignment operator is the syntax used to destructure an array from the right side of the assignment operator (original array unaffected)

const [x, y, z] = arr;
console.log(x, y, z);

// • [NOTE] Leave a hole to skip indices of array
const [cat1, cat2, , cat4] = restaurant.categories;
console.log(cat1, cat2, cat4);

console.log(restaurant.order(2, 0));
// [EXPECTS] ["Garlic Bread", "Pizza"]

// • [NOTE] Because restaurant.order returns an array, we can destructure the array into separate variables

const [appetizer, mainCourse] = restaurant.order(2, 0);
console.log(appetizer, mainCourse);

//  • [NOTE] Nested Destructuring
const nested = [2, 3, 4, [5, 6]];

const [nestedIn2, , , [nestedIn5]] = nested;
console.log(nestedIn2, nestedIn5);
// [EXPECTS] 2 5

//  • [NOTE] Default values in arrays
const arrayDefault = [6, 7];
const [value1 = 1, value2 = 1, value3 = 1] = arrayDefault;
console.log(value1, value2, value3);
